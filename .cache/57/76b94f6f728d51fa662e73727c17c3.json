{"id":"shader/fragmentShader.glsl","dependencies":[{"name":"/Users/SYF/Documents/GitHub/Shader_IndependentWork/package.json","includedInParent":true,"mtime":1638753017632}],"generated":{"js":"module.exports = \"#define GLSLIFY 1\\n varying vec4 vPosition;\\nvarying vec3 vNormal;\\nvarying float vNoiseParam;\\nvarying vec2 vUv;\\nvarying vec3 vNN; \\nvarying vec3 vEye;\\n\\nuniform vec3 fogColor;\\nuniform float fogNear;\\nuniform float fogFar;\\nuniform float uHeight;\\n\\nvec3 cosPalette(float t, vec3 a, vec3 b, vec3 c, vec3 d) {\\n    return a + b * cos(6.28318 * (c * t + d));\\n}\\n\\nvoid main() {\\n   vec3 color = vec3(0.5); \\n   vec3 fresnelColor = vec3(1.0, 0.4627, 0.9098);\\n\\n   /* -------------------------------------------------------------------------- */\\n/*                                    texture                                 */\\n/* -------------------------------------------------------------------------- */\\n   //color related to height;\\n  color = vec3(vNoiseParam*0.5)+0.4;\\n\\n/* -------------------------------------------------------------------------- */\\n/*                                    color patthern                                   */\\n/* -------------------------------------------------------------------------- */\\n   //pink and yellow\\n   float diff = dot(vec3(2., 4., 1.), vNormal) * 0.1;\\n   vec3 brightness = vec3(1.0, 0.6275, 0.2784);\\n   vec3 contrast = vec3(0.1451, 0.1451, 0.1451);\\n   vec3 osc = vec3(6.2);\\n   vec3 phase = vec3(0.102, 0.4157, 1.0);\\n  // color *= cosPalette(vUv.y * 0.3, brightness, contrast, osc, phase);\\n  // color += diff*0.4;\\n\\n   gl_FragColor = vec4(color, 1.);\\n  \\n   //fresnelColor\\n   // gl_FragColor = vec4(gl_FragColor.rgb, 0.3);\\n   // gl_FragColor.rgba +=  ( 1.0 - -min(dot(vEye, normalize(vNN) ), 0.0) ) * vec4(fresnelColor,0.0)*0.9;\\n\\n   //add fog\\n   #ifdef USE_FOG\\n      #ifdef USE_LOGDEPTHBUF_EXT\\n         float depth = gl_FragDepthEXT / gl_FragCoord.w;\\n      #else\\n         float depth = gl_FragCoord.z / gl_FragCoord.w;\\n      #endif\\n      float fogFactor = smoothstep( fogNear, fogFar, depth );\\n      gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n   #endif\\n\\n   // gl_FragColor = vec4(diff);\\n}\";"},"sourceMaps":{"js":{"mappings":[{"name":"module","generated":{"line":1,"column":0},"source":"shader/fragmentShader.glsl","original":{"line":1,"column":0}},{"generated":{"line":1,"column":6},"source":"shader/fragmentShader.glsl","original":{"line":1,"column":6}},{"name":"exports","generated":{"line":1,"column":7},"source":"shader/fragmentShader.glsl","original":{"line":1,"column":7}},{"generated":{"line":1,"column":14},"source":"shader/fragmentShader.glsl","original":{"line":1,"column":0}},{"generated":{"line":1,"column":17},"source":"shader/fragmentShader.glsl","original":{"line":1,"column":15}},{"generated":{"line":1,"column":2015},"source":"shader/fragmentShader.glsl","original":{"line":1,"column":0}}],"sources":{"shader/fragmentShader.glsl":"module.exports=\"#define GLSLIFY 1\\n varying vec4 vPosition;\\nvarying vec3 vNormal;\\nvarying float vNoiseParam;\\nvarying vec2 vUv;\\nvarying vec3 vNN; \\nvarying vec3 vEye;\\n\\nuniform vec3 fogColor;\\nuniform float fogNear;\\nuniform float fogFar;\\nuniform float uHeight;\\n\\nvec3 cosPalette(float t, vec3 a, vec3 b, vec3 c, vec3 d) {\\n    return a + b * cos(6.28318 * (c * t + d));\\n}\\n\\nvoid main() {\\n   vec3 color = vec3(0.5); \\n   vec3 fresnelColor = vec3(1.0, 0.4627, 0.9098);\\n\\n   /* -------------------------------------------------------------------------- */\\n/*                                    texture                                 */\\n/* -------------------------------------------------------------------------- */\\n   //color related to height;\\n  color = vec3(vNoiseParam*0.5)+0.4;\\n\\n/* -------------------------------------------------------------------------- */\\n/*                                    color patthern                                   */\\n/* -------------------------------------------------------------------------- */\\n   //pink and yellow\\n   float diff = dot(vec3(2., 4., 1.), vNormal) * 0.1;\\n   vec3 brightness = vec3(1.0, 0.6275, 0.2784);\\n   vec3 contrast = vec3(0.1451, 0.1451, 0.1451);\\n   vec3 osc = vec3(6.2);\\n   vec3 phase = vec3(0.102, 0.4157, 1.0);\\n  // color *= cosPalette(vUv.y * 0.3, brightness, contrast, osc, phase);\\n  // color += diff*0.4;\\n\\n   gl_FragColor = vec4(color, 1.);\\n  \\n   //fresnelColor\\n   // gl_FragColor = vec4(gl_FragColor.rgb, 0.3);\\n   // gl_FragColor.rgba +=  ( 1.0 - -min(dot(vEye, normalize(vNN) ), 0.0) ) * vec4(fresnelColor,0.0)*0.9;\\n\\n   //add fog\\n   #ifdef USE_FOG\\n      #ifdef USE_LOGDEPTHBUF_EXT\\n         float depth = gl_FragDepthEXT / gl_FragCoord.w;\\n      #else\\n         float depth = gl_FragCoord.z / gl_FragCoord.w;\\n      #endif\\n      float fogFactor = smoothstep( fogNear, fogFar, depth );\\n      gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n   #endif\\n\\n   // gl_FragColor = vec4(diff);\\n}\";"},"lineCount":null}},"error":null,"hash":"da95ba906fc96e6e23aa32c07ecd0c9f","cacheData":{"env":{}}}